name: Deploy infra
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        type: environment
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  set-variables:
    name: "Set Environment"
    runs-on: ubuntu-latest
    outputs:
      app_name: ${{ steps.set-appname.outputs.app_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - id: set-appname
        name: Set project properties variables
        run: |
          npm install
          echo "::set-output name=app_name::$(bash read_from_properties.sh ./project_properties.toml project.definition.name)"
  deploy-pipeline:
    name: Deploy ${{ inputs.environment }} pipeline
    environment: ${{ inputs.environment }}
    needs: [set-variables]
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ inputs.environment }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      APP_NAME: ${{ needs.set-variables.outputs.app_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Configure AWS Credentials Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.AWS_ROLE_TO_ASSUME}}
          role-session-name: networking-infra
          aws-region: ${{env.AWS_REGION}}
      - name:  Setup Parameters 
        run: |
          aws cloudformation deploy --template-file ./setup-pipelines/vpcParameters.yml --stack-name $APP_NAME-ssm-infrastructure-$ENVIRONMENT --parameter-overrides EnvironmentName=$ENVIRONMENT AppName=$APP_NAME --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM CAPABILITY_IAM
          aws cloudformation deploy --template-file ./setup-pipelines/pipelines.yml --stack-name $APP_NAME-pipeline-infrastructure-$ENVIRONMENT --parameter-overrides EnvironmentName=$ENVIRONMENT AppName=$APP_NAME --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM CAPABILITY_IAM

  deploy:
    name: Deploy ${{ inputs.environment }} AWS
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [set-variables, deploy-pipeline]
    env: 
      ENVIRONMENT: ${{ inputs.environment }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      APP_NAME: ${{ needs.set-variables.outputs.app_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Configure AWS Credentials Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.AWS_ROLE_TO_ASSUME}}
          role-session-name: $APP_NAME-networking-infra-deploy
          aws-region: ${{env.AWS_REGION}}
      - name:  Upload templates to AWS
        run: |
          cd templates
          zip  masterTemplate.zip ./masterTemplate.yaml
          cd ..
          aws s3 cp templates s3://artifacts-$ENVIRONMENT-$AWS_REGION-$AWS_ACCOUNT_ID/$APP_NAME/deploys/networking-db/infra/ --recursive
