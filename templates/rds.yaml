AWSTemplateFormatVersion: '2010-09-09'
Description: Instance PostgreSQL Database
Parameters:
  Environment:
    Description: Specify the Environment type of the stack.
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - staging
      - prod
  Name:
    Type: String

  PrivateSubnets:
    Description: Specify the Private subnets DB
    Type: String

  BusinessSG:
    Type: String
  #BastionSG:
  #  Type: String
  #  Default: "-"

  VPCData:
    Type: AWS::EC2::VPC::Id

  DBUsername:
    NoEcho: 'true'
    Description: Username for PostgreSQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: admin
  DBName:
    Type: String
    Default: generic_db
  DBPort:
    Type: String
    Default: '5432'
  AppName:
    Type: String
    Description: The project name.
Mappings:
  EnvAttrs:
    DBClassType:
      dev: db.t3.micro
      qa: db.t3.micro
      staging: db.t3.micro
      prod: db.t3.micro
    GibStorage:
      dev: '20'
      qa: '50'
      staging: '20'
      prod: '100'
Conditions:
  ProdEnv: !Equals
    - !Ref Environment
    - prod
  StagingEnv: !Equals
    - !Ref Environment
    - staging
  IsProd: !Or
    - !Condition ProdEnv
    - !Condition StagingEnv
Resources:
  RoleRdsMonitoring:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${Environment}-${AppName}-rds-Monitoring-Role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service:
                - monitoring.rds.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      Path: "/"
  DBPassword:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: !Sub 'Generated by the CDK for stack: ${AWS::StackName}'
      GenerateSecretString:
        ExcludeCharacters: ' %+~`#$&*()|[]{}:;<>?!''/@"\=^,'
        GenerateStringKey: password
        PasswordLength: 30
        SecretStringTemplate: !Sub '{"username":"${DBUsername}"}'
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet Group for PostgreSQL database
      DBSubnetGroupName: !Sub '${Name}-subnetgroup'
      SubnetIds: !Split
        - ','
        - !Ref PrivateSubnets
  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      StorageEncrypted: true
      DBInstanceIdentifier: !Sub '${Name}-dbinstance'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt SGDBnoIngress.GroupId
      AllocatedStorage: !FindInMap
        - EnvAttrs
        - GibStorage
        - !Ref Environment
      DBInstanceClass: !FindInMap
        - EnvAttrs
        - DBClassType
        - !Ref Environment
      Engine: postgres
      EngineVersion: "16.4"
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBPassword}:SecretString:password::}}'
      Tags:
        - Key: Name
          Value: !Sub '${Name}-rds'
      EnableCloudwatchLogsExports:
        - postgresql
      BackupRetentionPeriod: 35
      EnablePerformanceInsights: !If [IsProd, true, false]
      MonitoringInterval: 60
      MaxAllocatedStorage: 150
      MonitoringRoleArn: !GetAtt RoleRdsMonitoring.Arn
      MultiAZ: !If
        - IsProd
        - true
        - false

    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
  SSMDbConfig:
    Type: 'AWS::SSM::Parameter'
    Properties:
      DataType: text
      Name: !Sub "/config/infra/${Environment}/db/credentials"
      Tier: Standard
      Type: String
      Value: !Sub |
          {
            "db-name": "${DBName}",
            "db-user": "${DBUsername}",
            "db-password": "${DBPassword}",
            "db-host": "${DBInstance.Endpoint.Address}",
            "db-port": "${DBPort}"
          }
  SGDBnoIngress:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${Name}-Access-Bastion-DB'
      GroupDescription: Security group to allow access from
      VpcId: !Ref VPCData
      SecurityGroupIngress:
        - FromPort: 5432
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BusinessSG
          ToPort: 5432
  #      - FromPort: 5432
  #        IpProtocol: tcp
  #        SourceSecurityGroupId: !Ref BastionSG
  #        ToPort: 5432
Outputs:
  DBEndpoint:
    Description: Connection endpoint for the database
    Value: !GetAtt DBInstance.Endpoint.Address